import joblib
import os
import datetime
import pandas as pd
import matplotlib.pyplot as plt
import shap
import re

# Path to saved SHAP data
SHAP_DATA_PATH = "reports/shap_data.pkl"


def prettify_feature_name(name: str) -> str:
    """Convert machine-style feature names into human-readable form."""
    # Remove prefixes like 'cat__' or 'num__'
    name = re.sub(r"^(cat__|num__|bin__)", "", name)
    # Replace underscores with spaces
    name = name.replace("_", " ")
    # Capitalize each word
    name = name.title()
    # Replace multiple spaces
    name = re.sub(r"\s+", " ", name)
    return name.strip()


def load_shap_data():
    if not os.path.exists(SHAP_DATA_PATH):
        print("⚠️ SHAP data not found. Run train_model.py first.")
        return None, None, None, None
    data = joblib.load(SHAP_DATA_PATH)
    return (
        data["shap_values"],
        data["X_test_processed"],
        data["feature_names"],
        data["y_test"],
    )


def generate_report():
    shap_values, X_test_processed, feature_names, y_test = load_shap_data()
    if shap_values is None:
        return

    # Handle SHAP output structure for binary classification
    shap_values_class1 = (
        shap_values[1] if isinstance(shap_values, list) else
        shap_values[:, :, 1] if shap_values.ndim == 3 else
        shap_values
    )

    # Prettify feature names
    readable_features = [prettify_feature_name(f) for f in feature_names]

    # Update DataFrame columns to readable names
    X_test_df = pd.DataFrame(X_test_processed, columns=readable_features)
    shap_df = pd.DataFrame(shap_values_class1, columns=readable_features)

    # Compute mean absolute SHAP values
    mean_abs = shap_df.abs().mean().sort_values(ascending=False)

    # Prepare top 10 features
    top_features = mean_abs.head(10).reset_index()
    top_features.columns = ["Feature", "Mean |SHAP|"]

    # Create reports directory
    os.makedirs("reports", exist_ok=True)

    # --- Save bar chart ---
    plt.figure(figsize=(8, 5))
    plt.barh(top_features["Feature"], top_features["Mean |SHAP|"], color="#5bc0de")
    plt.gca().invert_yaxis()
    plt.title("Top 10 Features by Mean |SHAP| Impact", fontsize=13, fontweight="bold", color="#004085")
    plt.xlabel("Mean |SHAP Value|", fontsize=11)
    plt.tight_layout()
    png_path = "reports/xai_weekly_report.png"
    plt.savefig(png_path, dpi=150)
    plt.close()

    # --- SHAP summary (Beeswarm) plot with readable names ---
    summary_png = "reports/shap_summary.png"
    shap.summary_plot(
        shap_values_class1,
        X_test_df,
        feature_names=readable_features,
        show=False,
        plot_size=(10, 6),
        color_bar=True
    )
    plt.title("SHAP Summary (Beeswarm Plot)", fontsize=14, fontweight="bold", color="#004085")
    plt.tight_layout()
    plt.savefig(summary_png, bbox_inches='tight', dpi=150)
    plt.close()

    # --- Generate HTML report ---
    html_path = "reports/xai_weekly_report.html"
    with open(html_path, "w", encoding="utf-8") as f:
        f.write("""
        <html>
        <head>
            <title>XAI Weekly Report</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
            <style>
                body { margin: 40px; font-family: 'Segoe UI', Tahoma, sans-serif; }
                h1, h2 { color: #004085; }
                table { width: 70%; margin-top: 20px; }
                img { max-width: 90%; margin: 20px 0; border-radius: 10px; }
                footer { margin-top: 50px; font-size: 0.9em; color: #666; }
                hr { border-top: 2px solid #5bc0de; }
            </style>
        </head>
        <body>
        """)
        f.write("<h1>XAI Weekly Report</h1>")
        f.write(f"<p><b>Generated on:</b> {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>")
        f.write("<hr>")

        f.write("<h2>Top 10 Features by Mean |SHAP|</h2>")
        f.write(top_features.to_html(index=False, float_format="{:.4f}".format,
                                     classes="table table-striped table-bordered table-hover"))

        f.write("<h2>SHAP Feature Impact Chart</h2>")
        f.write(f'<img src="{os.path.basename(png_path)}" alt="Top 10 SHAP Features">')

        f.write("<h2>SHAP Summary (Beeswarm Plot)</h2>")
        f.write(f'<img src="{os.path.basename(summary_png)}" alt="SHAP Summary Plot">')

        f.write("""
        <footer>
        <p>Report automatically generated by the Explainable AI (XAI) module.</p>
        </footer>
        </body></html>
        """)

    print(f"✅ Enhanced XAI report saved successfully at {html_path}")


if __name__ == "__main__":
    generate_report()
